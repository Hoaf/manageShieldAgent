/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import DAO.MissionDAO;
import DAO.AgentDAO;
import DAO.AgentMissionDAO;
import DAO.MissionWeaponDAO;
import DAO.WeaponDAO;
import DTO.AgentDTO;
import DTO.AgentMissionDTO;
import DTO.MissionDTO;
import DTO.MissionWeaponDTO;
import DTO.WeaponDTO;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOA.f
 */
public class Admin extends javax.swing.JFrame {

    private DefaultTableModel agentModel = null;
    private DefaultTableModel missionModel = null;
    private DefaultTableModel weaponModel = null;
    private List<AgentDTO> agentResult = null;
    private List<MissionDTO> missionResult = null;
    private List<WeaponDTO> weaponResult = null;
    private int aCurPage = 1, aPage = 0;
    private int mCurPage = 1, mPage = 0;
    private int wCurPage = 1, wPage = 0;
    private File file = null;

    /**
     * Creates new form admin
     */
    public Admin() {
        initComponents();
        txtWExpiryDate.setEnabled(false);
        txtWMcode.setEnabled(false);
        txtAmission.setEnabled(false);
        txtMAgentID.setEnabled(false);
        txtMWeapons.setEnabled(false);
        rbtnMale.setSelected(true);
        rbtnNo.setSelected(true);

        this.setResizable(false);
        this.setLocation(350, 130);
        this.setTitle("Agent of Shield Management");
        setIcon();
        try {
            BufferedImage img = ImageIO.read(new File("images\\label.PNG"));
            ImageIcon icon = new ImageIcon(img.getScaledInstance(jLabel.getWidth() + 40, jLabel.getHeight() + 50, img.SCALE_SMOOTH));
            jLabel.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        agentModel = (DefaultTableModel) agentTable.getModel();
        missionModel = (DefaultTableModel) missionTable.getModel();
        weaponModel = (DefaultTableModel) weaponTable.getModel();

    }
    //load tables

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        agentPanel = new javax.swing.JPanel();
        agentDetailPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtAID = new javax.swing.JTextField();
        txtAPassWord = new javax.swing.JPasswordField();
        txtAName = new javax.swing.JTextField();
        txtABirth = new javax.swing.JTextField();
        txtAHeight = new javax.swing.JTextField();
        txtARole = new javax.swing.JTextField();
        txtAMajor = new javax.swing.JTextField();
        txtADegree = new javax.swing.JTextField();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        rbtnYes = new javax.swing.JRadioButton();
        rbtnNo = new javax.swing.JRadioButton();
        btnANew = new javax.swing.JButton();
        btnAUpdate = new javax.swing.JButton();
        btnADelete = new javax.swing.JButton();
        btnAInsert = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAmission = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        agentTable = new javax.swing.JTable();
        avatarPanel = new javax.swing.JPanel();
        labelAimg = new javax.swing.JLabel();
        btnAChangeImg = new javax.swing.JButton();
        txtASearch = new javax.swing.JTextField();
        btnASearch = new javax.swing.JButton();
        labelApage = new javax.swing.JLabel();
        btnANextPage = new javax.swing.JButton();
        btnAPrePage = new javax.swing.JButton();
        chBoxLoadAsuper = new javax.swing.JCheckBox();
        chBoxLoadAnosuper = new javax.swing.JCheckBox();
        missionPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        missionTable = new javax.swing.JTable();
        missionDetailPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtMCode = new javax.swing.JTextField();
        txtMName = new javax.swing.JTextField();
        txtMTarget = new javax.swing.JTextField();
        txtMbegin = new javax.swing.JTextField();
        txtMExpiry = new javax.swing.JTextField();
        txtMNumofagent = new javax.swing.JTextField();
        btnMNew = new javax.swing.JButton();
        btnMInsert = new javax.swing.JButton();
        btnMDelete = new javax.swing.JButton();
        btnMUpdate = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        txtMLocation = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtMStatus = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtMDescription = new javax.swing.JTextArea();
        txtMSearch = new javax.swing.JTextField();
        btnMSearchName = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtMAgentID = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtMWeapons = new javax.swing.JTextArea();
        labelMPage = new javax.swing.JLabel();
        btnMNextPage = new javax.swing.JButton();
        btnMPrePage = new javax.swing.JButton();
        weaponPanel = new javax.swing.JPanel();
        weaponDetailPanel = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtWCode = new javax.swing.JTextField();
        txtWName = new javax.swing.JTextField();
        txtWFund = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtWDes = new javax.swing.JTextArea();
        jScrollPanee = new javax.swing.JScrollPane();
        txtWMcode = new javax.swing.JTextArea();
        btnWNew = new javax.swing.JButton();
        btnWInsert = new javax.swing.JButton();
        btnWDelete = new javax.swing.JButton();
        btnWUpdate = new javax.swing.JButton();
        txtWExpiryDate = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        weaponTable = new javax.swing.JTable();
        imageWPanel = new javax.swing.JPanel();
        btnWChangeImg = new javax.swing.JButton();
        labelWImage = new javax.swing.JLabel();
        txtWSearchName = new javax.swing.JTextField();
        btnWSearchName = new javax.swing.JButton();
        labelWPage = new javax.swing.JLabel();
        btnWNextPage = new javax.swing.JButton();
        btnWPrePage = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadAgentItem = new javax.swing.JMenuItem();
        loadMissionItem = new javax.swing.JMenuItem();
        loadWeaponItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(17, 17, 17));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel.setPreferredSize(new java.awt.Dimension(944, 180));
        getContentPane().add(jLabel, java.awt.BorderLayout.CENTER);

        TabbedPane.setBackground(new java.awt.Color(0, 0, 0));
        TabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        TabbedPane.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        TabbedPane.setOpaque(true);
        TabbedPane.setPreferredSize(new java.awt.Dimension(1060, 600));

        agentPanel.setBackground(new java.awt.Color(102, 102, 102));
        agentPanel.setPreferredSize(new java.awt.Dimension(954, 280));

        agentDetailPanel.setBackground(new java.awt.Color(153, 153, 153));
        agentDetailPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        jLabel1.setText("ID :");

        jLabel3.setText("Password :");

        jLabel4.setText("Name :");

        jLabel5.setText("Year of birth :");

        jLabel6.setText("Height (cm) :");

        jLabel7.setText("Gender :");

        jLabel8.setText("Role :");

        jLabel9.setText("Super Power :");

        jLabel10.setText("Major :");

        jLabel11.setText("Degree :");

        jLabel12.setText("Mission joined :");

        txtAID.setToolTipText("AG000");
        txtAID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAIDActionPerformed(evt);
            }
        });

        txtABirth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtABirthActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtnMale);
        rbtnMale.setText("Male");

        buttonGroup1.add(rbtnFemale);
        rbtnFemale.setText("Female");

        buttonGroup2.add(rbtnYes);
        rbtnYes.setText("Yes");

        buttonGroup2.add(rbtnNo);
        rbtnNo.setText("No");

        btnANew.setText("New");
        btnANew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnANewActionPerformed(evt);
            }
        });

        btnAUpdate.setText("Update");
        btnAUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAUpdateActionPerformed(evt);
            }
        });

        btnADelete.setText("Delete");
        btnADelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADeleteActionPerformed(evt);
            }
        });

        btnAInsert.setText("Insert");
        btnAInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAInsertActionPerformed(evt);
            }
        });

        txtAmission.setColumns(20);
        txtAmission.setLineWrap(true);
        txtAmission.setRows(5);
        txtAmission.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtAmission);

        javax.swing.GroupLayout agentDetailPanelLayout = new javax.swing.GroupLayout(agentDetailPanel);
        agentDetailPanel.setLayout(agentDetailPanelLayout);
        agentDetailPanelLayout.setHorizontalGroup(
            agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentDetailPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel10)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtAID, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(agentDetailPanelLayout.createSequentialGroup()
                            .addComponent(txtADegree)
                            .addGap(114, 114, 114))
                        .addGroup(agentDetailPanelLayout.createSequentialGroup()
                            .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(agentDetailPanelLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(rbtnYes))
                                .addGroup(agentDetailPanelLayout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(rbtnMale)))
                            .addGap(18, 18, 18)
                            .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rbtnNo)
                                .addComponent(rbtnFemale)))
                        .addComponent(txtAHeight)
                        .addComponent(txtABirth)
                        .addComponent(txtAName)
                        .addComponent(txtAPassWord)
                        .addComponent(txtARole, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentDetailPanelLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(btnANew)
                .addGap(6, 6, 6)
                .addComponent(btnAInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnADelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAUpdate)
                .addGap(29, 29, 29))
        );
        agentDetailPanelLayout.setVerticalGroup(
            agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentDetailPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtABirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(rbtnMale)
                    .addComponent(rbtnFemale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtARole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnYes)
                    .addComponent(rbtnNo)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtAMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtADegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(agentDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnANew)
                    .addComponent(btnAUpdate)
                    .addComponent(btnADelete)
                    .addComponent(btnAInsert))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(153, 153, 153));

        agentTable.setBackground(new java.awt.Color(153, 153, 153));
        agentTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        agentTable.setForeground(new java.awt.Color(0, 0, 0));
        agentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Major", "Degree"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        agentTable.setPreferredSize(new java.awt.Dimension(300, 130));
        agentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(agentTable);

        avatarPanel.setBackground(new java.awt.Color(153, 153, 153));
        avatarPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        avatarPanel.setForeground(new java.awt.Color(153, 153, 153));

        btnAChangeImg.setText("Change image");
        btnAChangeImg.setToolTipText("");
        btnAChangeImg.setRequestFocusEnabled(false);
        btnAChangeImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAChangeImgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout avatarPanelLayout = new javax.swing.GroupLayout(avatarPanel);
        avatarPanel.setLayout(avatarPanelLayout);
        avatarPanelLayout.setHorizontalGroup(
            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelAimg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAChangeImg, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );
        avatarPanelLayout.setVerticalGroup(
            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, avatarPanelLayout.createSequentialGroup()
                .addComponent(btnAChangeImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelAimg, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE))
        );

        btnASearch.setText("Search");
        btnASearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnASearchActionPerformed(evt);
            }
        });

        labelApage.setText("0 / 0");

        btnANextPage.setText(">");
        btnANextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnANextPageActionPerformed(evt);
            }
        });

        btnAPrePage.setText("<");
        btnAPrePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAPrePageActionPerformed(evt);
            }
        });

        chBoxLoadAsuper.setText("Load Super");
        chBoxLoadAsuper.setActionCommand("");
        chBoxLoadAsuper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBoxLoadAsuperActionPerformed(evt);
            }
        });

        chBoxLoadAnosuper.setText("Load Non-Super");
        chBoxLoadAnosuper.setActionCommand("");
        chBoxLoadAnosuper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBoxLoadAnosuperActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout agentPanelLayout = new javax.swing.GroupLayout(agentPanel);
        agentPanel.setLayout(agentPanelLayout);
        agentPanelLayout.setHorizontalGroup(
            agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentPanelLayout.createSequentialGroup()
                .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentPanelLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(agentPanelLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(avatarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, agentPanelLayout.createSequentialGroup()
                                    .addComponent(txtASearch, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnASearch)
                                    .addGap(18, 18, 18)
                                    .addComponent(chBoxLoadAsuper)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chBoxLoadAnosuper))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(agentPanelLayout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(btnAPrePage)
                        .addGap(18, 18, 18)
                        .addComponent(labelApage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnANextPage)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(agentDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        agentPanelLayout.setVerticalGroup(
            agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addGroup(agentPanelLayout.createSequentialGroup()
                        .addComponent(avatarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtASearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnASearch)
                            .addComponent(chBoxLoadAsuper)
                            .addComponent(chBoxLoadAnosuper))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(agentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelApage)
                            .addComponent(btnANextPage)
                            .addComponent(btnAPrePage))
                        .addGap(2, 2, 2)))
                .addGap(40, 40, 40))
        );

        TabbedPane.addTab("Agents", agentPanel);

        missionPanel.setBackground(new java.awt.Color(102, 102, 102));

        missionTable.setBackground(new java.awt.Color(153, 153, 153));
        missionTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        missionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MissionCode", "MisstionName", "Target", "NumberOfAgent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        missionTable.setPreferredSize(new java.awt.Dimension(300, 150));
        missionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                missionTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(missionTable);

        missionDetailPanel.setBackground(new java.awt.Color(153, 153, 153));
        missionDetailPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        jLabel13.setText("CODE :");

        jLabel14.setText("Name :");

        jLabel15.setText("Target :");

        jLabel17.setText("Description :");

        jLabel18.setText("Beginning Date :");

        jLabel19.setText("Expiry Date :");

        jLabel20.setText("Number of agent :");

        txtMCode.setToolTipText("MS00");

        txtMbegin.setToolTipText("yyyy-mm-dd ");

        txtMExpiry.setToolTipText("yyyy-mm-dd");

        btnMNew.setText("New");
        btnMNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMNewActionPerformed(evt);
            }
        });

        btnMInsert.setText("Insert");
        btnMInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMInsertActionPerformed(evt);
            }
        });

        btnMDelete.setText("Delete");
        btnMDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMDeleteActionPerformed(evt);
            }
        });

        btnMUpdate.setText("Update");
        btnMUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMUpdateActionPerformed(evt);
            }
        });

        jLabel21.setText("Location :");

        jLabel22.setText("Status :");

        txtMDescription.setColumns(20);
        txtMDescription.setLineWrap(true);
        txtMDescription.setRows(5);
        txtMDescription.setWrapStyleWord(true);
        jScrollPane4.setViewportView(txtMDescription);

        javax.swing.GroupLayout missionDetailPanelLayout = new javax.swing.GroupLayout(missionDetailPanel);
        missionDetailPanel.setLayout(missionDetailPanelLayout);
        missionDetailPanelLayout.setHorizontalGroup(
            missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, missionDetailPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(missionDetailPanelLayout.createSequentialGroup()
                        .addComponent(txtMNumofagent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtMCode, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMbegin)
                    .addComponent(txtMExpiry)
                    .addComponent(txtMLocation)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
            .addGroup(missionDetailPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnMNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        missionDetailPanelLayout.setVerticalGroup(
            missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(missionDetailPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMbegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMExpiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtMNumofagent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(txtMStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtMLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(missionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMNew)
                    .addComponent(btnMInsert)
                    .addComponent(btnMDelete)
                    .addComponent(btnMUpdate))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        txtMSearch.setToolTipText("Search by name");

        btnMSearchName.setText("Search");
        btnMSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMSearchNameActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel2.setText("Agent ID :");

        txtMAgentID.setColumns(20);
        txtMAgentID.setLineWrap(true);
        txtMAgentID.setRows(5);
        txtMAgentID.setWrapStyleWord(true);
        jScrollPane5.setViewportView(txtMAgentID);

        jLabel16.setText("Weapons needed :");

        txtMWeapons.setColumns(20);
        txtMWeapons.setLineWrap(true);
        txtMWeapons.setRows(5);
        txtMWeapons.setWrapStyleWord(true);
        jScrollPane6.setViewportView(txtMWeapons);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel16)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        labelMPage.setText("0 / 0");

        btnMNextPage.setText(">");
        btnMNextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMNextPageActionPerformed(evt);
            }
        });

        btnMPrePage.setText("<");
        btnMPrePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMPrePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout missionPanelLayout = new javax.swing.GroupLayout(missionPanel);
        missionPanel.setLayout(missionPanelLayout);
        missionPanelLayout.setHorizontalGroup(
            missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(missionPanelLayout.createSequentialGroup()
                .addGroup(missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, missionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnMPrePage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMNextPage)
                        .addGap(225, 225, 225))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, missionPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114))
                    .addGroup(missionPanelLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(missionPanelLayout.createSequentialGroup()
                                .addComponent(txtMSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMSearchName)
                                .addGap(0, 263, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addComponent(missionDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        missionPanelLayout.setVerticalGroup(
            missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(missionPanelLayout.createSequentialGroup()
                .addGroup(missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(missionPanelLayout.createSequentialGroup()
                        .addContainerGap(15, Short.MAX_VALUE)
                        .addComponent(missionDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(missionPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMSearchName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(missionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMPage)
                            .addComponent(btnMNextPage)
                            .addComponent(btnMPrePage))))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Missions", missionPanel);

        weaponPanel.setBackground(new java.awt.Color(102, 102, 102));

        weaponDetailPanel.setBackground(new java.awt.Color(153, 153, 153));

        jLabel23.setText("Weapon Code :");

        jLabel24.setText("Weapon Name :");

        jLabel25.setText("Fund :");

        jLabel26.setText("Description :");

        jLabel27.setText("Available Date :");

        jLabel28.setText("Mission borrowed :");

        txtWCode.setToolTipText("WP000");

        txtWDes.setColumns(20);
        txtWDes.setLineWrap(true);
        txtWDes.setRows(5);
        txtWDes.setWrapStyleWord(true);
        jScrollPane7.setViewportView(txtWDes);

        txtWMcode.setColumns(20);
        txtWMcode.setLineWrap(true);
        txtWMcode.setRows(5);
        txtWMcode.setWrapStyleWord(true);
        jScrollPanee.setViewportView(txtWMcode);

        btnWNew.setText("New");
        btnWNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWNewActionPerformed(evt);
            }
        });

        btnWInsert.setText("Insert");
        btnWInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWInsertActionPerformed(evt);
            }
        });

        btnWDelete.setText("Delete");
        btnWDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWDeleteActionPerformed(evt);
            }
        });

        btnWUpdate.setText("Update");
        btnWUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout weaponDetailPanelLayout = new javax.swing.GroupLayout(weaponDetailPanel);
        weaponDetailPanel.setLayout(weaponDetailPanelLayout);
        weaponDetailPanelLayout.setHorizontalGroup(
            weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponDetailPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(weaponDetailPanelLayout.createSequentialGroup()
                        .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPanee, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWFund, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWCode, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponDetailPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnWNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWUpdate)))
                .addGap(20, 20, 20))
        );
        weaponDetailPanelLayout.setVerticalGroup(
            weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponDetailPanelLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(txtWName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWFund, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPanee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addGap(28, 28, 28)
                .addGroup(weaponDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWNew)
                    .addComponent(btnWInsert)
                    .addComponent(btnWDelete)
                    .addComponent(btnWUpdate))
                .addGap(21, 21, 21))
        );

        weaponTable.setBackground(new java.awt.Color(153, 153, 153));
        weaponTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        weaponTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Fund"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        weaponTable.setPreferredSize(new java.awt.Dimension(225, 150));
        weaponTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weaponTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(weaponTable);

        imageWPanel.setBackground(new java.awt.Color(153, 153, 153));

        btnWChangeImg.setText("Change image");
        btnWChangeImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWChangeImgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imageWPanelLayout = new javax.swing.GroupLayout(imageWPanel);
        imageWPanel.setLayout(imageWPanelLayout);
        imageWPanelLayout.setHorizontalGroup(
            imageWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnWChangeImg, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
            .addComponent(labelWImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        imageWPanelLayout.setVerticalGroup(
            imageWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageWPanelLayout.createSequentialGroup()
                .addComponent(btnWChangeImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelWImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtWSearchName.setToolTipText("Search by name ");

        btnWSearchName.setText("Search");
        btnWSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWSearchNameActionPerformed(evt);
            }
        });

        labelWPage.setText("0 / 0");

        btnWNextPage.setText(">");
        btnWNextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWNextPageActionPerformed(evt);
            }
        });

        btnWPrePage.setText("<");
        btnWPrePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWPrePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout weaponPanelLayout = new javax.swing.GroupLayout(weaponPanel);
        weaponPanel.setLayout(weaponPanelLayout);
        weaponPanelLayout.setHorizontalGroup(
            weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponPanelLayout.createSequentialGroup()
                .addGroup(weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(weaponPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(weaponPanelLayout.createSequentialGroup()
                                .addComponent(txtWSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWSearchName))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(weaponPanelLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(imageWPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(weaponPanelLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(btnWPrePage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelWPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWNextPage)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(weaponDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        weaponPanelLayout.setVerticalGroup(
            weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weaponPanelLayout.createSequentialGroup()
                .addGroup(weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(weaponPanelLayout.createSequentialGroup()
                        .addContainerGap(129, Short.MAX_VALUE)
                        .addComponent(weaponDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(weaponPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(imageWPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnWSearchName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(weaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelWPage)
                            .addComponent(btnWNextPage)
                            .addComponent(btnWPrePage))))
                .addGap(53, 53, 53))
        );

        TabbedPane.addTab("Weapons", weaponPanel);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.PAGE_END);
        TabbedPane.getAccessibleContext().setAccessibleDescription("");

        menuBar.setBackground(new java.awt.Color(153, 153, 153));

        jMenu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenu1.setText("Tools");
        jMenu1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        loadAgentItem.setText("Load agents");
        loadAgentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAgentItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadAgentItem);

        loadMissionItem.setText("Load missions");
        loadMissionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMissionItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadMissionItem);

        loadWeaponItem.setText("Load weapon");
        loadWeaponItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadWeaponItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadWeaponItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitItem);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAIDActionPerformed

    private void missionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_missionTableMouseClicked
        txtMCode.setEnabled(false);
        txtMAgentID.setEnabled(true);
        txtMWeapons.setEnabled(true);
        txtMAgentID.setText("");
        txtMWeapons.setText("");
        int count = missionTable.getSelectedRow();
        if (count < 0) {
            return;
        }
        MissionDTO mission = missionResult.get(count);
        txtMCode.setText(mission.getMisCode());
        txtMName.setText(mission.getMisName());
        txtMTarget.setText(mission.getTarget());
        txtMDescription.setText(mission.getDescription());
        txtMbegin.setText(mission.getBeginDate());
        txtMExpiry.setText(mission.getExpiryDate());
        txtMNumofagent.setText(mission.getNumofAgent() + "");
        txtMLocation.setText(mission.getLocation());
        txtMStatus.setText(mission.getStatus());
        //Search by mcode (have agent or not)
        List<AgentMissionDTO> agentList = new ArrayList();
        agentList = this.searchMissionCode(mission.getMisCode());
        for (AgentMissionDTO dto : agentList) {
            txtMAgentID.append(dto.getAgentID() + "\n");
        }
        //Search by mcode (have weapon or not)
        List<MissionWeaponDTO> weaponList = new ArrayList();
        weaponList = this.searchWeapon(mission.getMisCode());
        for (MissionWeaponDTO dto : weaponList) {
            txtMWeapons.append(dto.getWeaponCode() + "\n");
        }
    }//GEN-LAST:event_missionTableMouseClicked

    private void agentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agentTableMouseClicked
        txtAID.setEnabled(false);
        txtAmission.setEnabled(true);
        txtAmission.setText("");
        int count = agentTable.getSelectedRow();
        if (count < 0) {
            return;
        }
        AgentDTO cur = new AgentDTO();
        cur = agentResult.get(count);
        txtAID.setText(cur.getId());
        txtAPassWord.setText(cur.getPassord());
        txtAName.setText(cur.getName());
        txtABirth.setText(cur.getYearOfBirth() + "");
        txtAHeight.setText(cur.getHeight() + "");
        rbtnMale.setSelected(cur.isGender());
        rbtnFemale.setSelected(!cur.isGender());
        txtARole.setText(cur.getRole());
        rbtnYes.setSelected(cur.isSuperpower());
        rbtnNo.setSelected(!cur.isSuperpower());
        txtAMajor.setText(cur.getMajor());
        txtADegree.setText(cur.getDegree() + "");
        //search agentID (have mission or not)
        List<AgentMissionDTO> listMission = new ArrayList();
        listMission = this.searchAgentID(cur.getId());
        for (AgentMissionDTO dto : listMission) {
            txtAmission.append(dto.getMissionCode() + "\n");
        }
        //get image
        String img = cur.getImage();
        try {
            BufferedImage image = ImageIO.read(new File(img));
            ImageIcon icon = new ImageIcon(image.getScaledInstance(labelAimg.getWidth(), labelAimg.getHeight(), 0));
            labelAimg.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_agentTableMouseClicked

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "YES to exit program / NO back to login");
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else if (confirm == JOptionPane.NO_OPTION) {
            Login log = new Login();
            log.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_exitItemActionPerformed

    private void loadAgentItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAgentItemActionPerformed
        agentModel.setRowCount(0);
        chBoxLoadAnosuper.setSelected(false);
        chBoxLoadAsuper.setSelected(false);
        txtASearch.setText("");
        AgentDAO agentDao = new AgentDAO();
        try {
            int numOfrecord = agentDao.countARecord("");
            aPage = returnNumOfPage(numOfrecord);
            labelApage.setText("1 / " + aPage);
            aCurPage = 1;
            agentResult = agentDao.searchAName("", aCurPage);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        displayAgent(agentResult);
    }//GEN-LAST:event_loadAgentItemActionPerformed

    private void loadMissionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMissionItemActionPerformed
        missionModel.setRowCount(0);
        txtMSearch.setText("");
        MissionDAO missionDao = new MissionDAO();
        try {
            int record = missionDao.countMRecord("");
            mPage = returnNumOfPage(record);
            mCurPage = 1;
            labelMPage.setText(mCurPage + " / " + mPage);
            missionResult = missionDao.searchName("", mCurPage);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        displayMission(missionResult);
    }//GEN-LAST:event_loadMissionItemActionPerformed

    private void btnMInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMInsertActionPerformed
        String code = txtMCode.getText().toUpperCase();
        String name = txtMName.getText();
        String target = txtMTarget.getText();
        String des = txtMDescription.getText();
        String begin = txtMbegin.getText();
        String expiry = txtMExpiry.getText();
        int num = 0;//to checkMission(...) != ""
        try {
            num = Integer.parseInt(txtMNumofagent.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Number of agent must be digit");
        }
        String location = txtMLocation.getText();
        String status = txtMStatus.getText();

        //check expiry after begin
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
        Date date1 = new Date();
        Date date2 = new Date();
        try {
            date1 = sdf.parse(begin);
            date2 = sdf.parse(expiry);
            if (date1.after(date2)) {
                JOptionPane.showMessageDialog(null, " Expiry Date have to after Beginning Date");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Format Date (yyyy-mm-dd)");
            return;
        }
        String check = checkMission(code, name, target, des, begin, expiry, num, location, status);
        if (missionResult == null) {
            missionResult = new ArrayList();
        }
        if (check.equals("")) {
            MissionDTO dto = new MissionDTO(code, name, target, des, begin, expiry, num, location, status);
            MissionDAO missionDao = new MissionDAO();
            try {
                if (missionDao.insert(dto)) {
                    missionResult.add(dto);
                    missionModel.addRow(dto.toVector());
                    JOptionPane.showMessageDialog(null, "Insert Succeed");
                } else {
                    JOptionPane.showMessageDialog(null, "Insert Failed");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Code existed");
                } else if (e.getMessage().contains("convert")) {
                    JOptionPane.showMessageDialog(null, "Format date : yyyy-mm-dd");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
    }//GEN-LAST:event_btnMInsertActionPerformed

    private void btnMNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMNewActionPerformed
        txtMCode.setEnabled(true);
        txtMAgentID.setEnabled(false);
        txtMWeapons.setEnabled(false);
        txtMAgentID.setText("");
        txtMWeapons.setText("");
        txtMCode.setText("");
        txtMName.setText("");
        txtMTarget.setText("");
        txtMWeapons.setText("");
        txtMDescription.setText("");
        txtMbegin.setText("");
        txtMExpiry.setText("");
        txtMNumofagent.setText("");
        txtMLocation.setText("");
        txtMStatus.setText("");
        txtMAgentID.setText("");
    }//GEN-LAST:event_btnMNewActionPerformed

    private void btnMDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMDeleteActionPerformed
        int row = missionTable.getSelectedRow();
        String id = txtMCode.getText();
        MissionDAO dao = new MissionDAO();
        boolean deleted;
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + (String) missionTable.getValueAt(row, 1));
        if (confirm == JOptionPane.NO_OPTION) {
            return;
        }
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                deleted = dao.delete(id);
                if (deleted) {
                    missionResult.remove(row);
                    missionModel.removeRow(row);
                    txtMCode.setText("");
                    txtMName.setText("");
                    txtMTarget.setText("");
                    txtMDescription.setText("");
                    txtMbegin.setText("");
                    txtMExpiry.setText("");
                    txtMNumofagent.setText("");
                    txtMLocation.setText("");
                    txtMStatus.setText("");
                    JOptionPane.showMessageDialog(null, "Deleted");
                } else {
                    JOptionPane.showMessageDialog(null, "Delete failed");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("FK_")) {
                    JOptionPane.showMessageDialog(null, "You should remove Agent ID & Weapon Code before delete this mission");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnMDeleteActionPerformed

    private void btnMUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMUpdateActionPerformed
        int row = missionTable.getSelectedRow();
        String code = txtMCode.getText();
        String name = txtMName.getText();
        String target = txtMTarget.getText();
        String des = txtMDescription.getText();
        String begin = txtMbegin.getText();
        String expiry = txtMExpiry.getText();
        int num = 0;//to checkMission(...) != ""
        try {
            num = Integer.parseInt(txtMNumofagent.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Number of agent must be digit");
        }
        String location = txtMLocation.getText();
        String status = txtMStatus.getText();
        //check expiry after begin
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
        Date date1 = new Date();
        Date date2 = new Date();
        try {
            date1 = sdf.parse(begin);
            date2 = sdf.parse(expiry);
            if (date1.after(date2)) {
                JOptionPane.showMessageDialog(null, " Expiry Date have to after Beginning Date");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Format Date (yyyy-mm-dd)");
            return;
        }
        String check = checkMission(code, name, target, des, begin, expiry, num, location, status);
        boolean updated;

        if (check.equals("")) {
            MissionDTO dto = new MissionDTO(code, name, target, des, begin, expiry, num, location, status);
            MissionDAO dao = new MissionDAO();
            try {
                updated = dao.update(dto);
                if (updated) {
                    missionResult.set(row, dto);
                    missionModel.setValueAt(code, row, 0);
                    missionModel.setValueAt(name, row, 1);
                    missionModel.setValueAt(target, row, 2);
                    missionModel.setValueAt(num, row, 3);
                    JOptionPane.showMessageDialog(null, "Updated");
                } else {
                    JOptionPane.showMessageDialog(null, "Update failed");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("convert")) {
                    JOptionPane.showMessageDialog(null, "Format date : yyyy-mm-dd");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
        //update AgentMission table
        this.updateAgentMission(code, num);
        //update MissionWeapon table
        this.updateMissionWeapon(code, expiry);
    }//GEN-LAST:event_btnMUpdateActionPerformed

    private void btnMSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMSearchNameActionPerformed
        missionModel.setRowCount(0);
        MissionDAO dao = null;
        String name = txtMSearch.getText().trim();
        if (name.length() == 0) {
            JOptionPane.showMessageDialog(null, "Please, type something ...");
            mCurPage = 0;
            mPage = 0;
            labelMPage.setText(mCurPage + " / " + mPage);
        } else {
            try {
                dao = new MissionDAO();
                mPage = returnNumOfPage(dao.countMRecord(name));
                mCurPage = 1;
                missionResult = dao.searchName(name, mCurPage);
                labelMPage.setText(mCurPage + " / " + mPage);
                if (missionResult.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No results were found");
                } else {
                    displayMission(missionResult);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMSearchNameActionPerformed

    private void btnAInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAInsertActionPerformed
        String id, password, name, major, role, img;
        int degree = 0, birth = 0, height = 0;
        boolean gender, superPow;
        boolean inserted = false;

        id = txtAID.getText().toUpperCase();
        password = txtAPassWord.getText();
        name = txtAName.getText();
        try {
            birth = Integer.parseInt(txtABirth.getText());
            height = Integer.parseInt(txtAHeight.getText());
            degree = Integer.parseInt(txtADegree.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Birth, height, degree must be digit");
        }
        gender = rbtnMale.isSelected();
        role = txtARole.getText();
        superPow = rbtnYes.isSelected();
        major = txtAMajor.getText();
        if (file != null) {
            img = changeToRelativePath(file.getAbsolutePath());
        } else {
            //default img
            img = "images\\default.png";
        }
        String check = checkAgentValid(id, password, name, major, role, degree, birth, height);
        if (check.equals("")) {
            AgentDTO dto = new AgentDTO(id, password, name, birth, height, gender, role, superPow, major, degree, img);
            AgentDAO dao = new AgentDAO();
            if (agentResult == null) {
                agentResult = new ArrayList();
            }
            try {
                inserted = dao.insert(dto);
                if (inserted) {
                    JOptionPane.showMessageDialog(null, "Inserted");
                    agentResult.add(dto);
                    agentModel.addRow(dto.toVector());
                } else {
                    JOptionPane.showMessageDialog(null, "Insert failed");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "ID existed");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
        file = null;//set default image 
    }//GEN-LAST:event_btnAInsertActionPerformed

    private void btnAChangeImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAChangeImgActionPerformed
        JFileChooser imgChooser = new JFileChooser();
        int returnVal = imgChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = imgChooser.getSelectedFile();
            try {
                BufferedImage img = ImageIO.read(file);
                ImageIcon icon = new ImageIcon(img.getScaledInstance(labelAimg.getWidth(), labelAimg.getHeight(), img.SCALE_SMOOTH));
                labelAimg.setIcon(icon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btnAChangeImgActionPerformed

    private void btnANewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnANewActionPerformed
        txtAID.setEnabled(true);
        txtAmission.setEnabled(false);
        txtAID.setText("");
        txtAPassWord.setText("");
        txtAName.setText("");
        txtABirth.setText("");
        txtAHeight.setText("");
        txtARole.setText("");
        txtAMajor.setText("");
        txtADegree.setText("");
        try {
            BufferedImage img = ImageIO.read(new File("images\\default.png"));
            ImageIcon icon = new ImageIcon(img.getScaledInstance(labelAimg.getWidth(), labelAimg.getHeight(), img.SCALE_SMOOTH));
            labelAimg.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        txtAmission.setText("");
    }//GEN-LAST:event_btnANewActionPerformed

    private void btnAUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAUpdateActionPerformed
        String id, password, name, major, role, img;
        int degree = 0, birth = 0, height = 0;
        boolean gender, superPow;
        boolean updated = false;

        id = txtAID.getText();
        password = txtAPassWord.getText();
        name = txtAName.getText();
        try {
            birth = Integer.parseInt(txtABirth.getText());
            height = Integer.parseInt(txtAHeight.getText());
            degree = Integer.parseInt(txtADegree.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Birth, height, degree must be digit");
        }
        gender = rbtnMale.isSelected();
        role = txtARole.getText();
        superPow = rbtnYes.isSelected();
        major = txtAMajor.getText();

        int row = agentTable.getSelectedRow();
        AgentDTO cur = agentResult.get(row);
        if (file != null) {
            img = changeToRelativePath(file.getAbsolutePath());
        } else {
            img = cur.getImage();
        }
        String check = checkAgentValid(id, password, name, major, role, degree, birth, height);
        if (check.equals("")) {
            AgentDTO dto = new AgentDTO(id, password, name, birth, height, gender, role, superPow, major, degree, img);
            AgentDAO dao = new AgentDAO();
            try {
                updated = dao.update(dto);
                if (updated) {
                    agentResult.set(row, dto);
                    agentModel.setValueAt(id, row, 0);
                    agentModel.setValueAt(name, row, 1);
                    agentModel.setValueAt(major, row, 2);
                    agentModel.setValueAt(degree, row, 3);
                    JOptionPane.showMessageDialog(null, "Updated");
                } else {
                    JOptionPane.showMessageDialog(null, "Update failed");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
        file = null;

        //update AgentMissionTable
        boolean insertedAM = false, deletedAM = false;
        List<AgentMissionDTO> listMission = new ArrayList();
        String line = txtAmission.getText().toUpperCase();
        StringTokenizer stk = new StringTokenizer(line);
        while (stk.hasMoreTokens()) {
            listMission.add(new AgentMissionDTO(id, stk.nextToken()));
        }
        AgentMissionDAO daoAM = new AgentMissionDAO();
        if (listMission.size() == 0) {
            try {
                deletedAM = daoAM.deleteByAid(id);
                if (deletedAM) {
                    JOptionPane.showMessageDialog(null, "Deleted agent's missions");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            try {
                deletedAM = daoAM.deleteByAid(id);
                insertedAM = daoAM.insert(listMission);
                if (insertedAM) {
                    JOptionPane.showMessageDialog(null, "Updated agent's missions");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("FK_AgentMission_mission")) {
                    JOptionPane.showMessageDialog(null, "Mission code doesn't exist");
                } else if (e.getMessage().contains("truncate")) {
                    JOptionPane.showMessageDialog(null, " Format mission code : MS00");
                } else if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Mission have been assigned");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage() + " Format mission code : MS00");
                }
            }
        }

    }//GEN-LAST:event_btnAUpdateActionPerformed

    private void btnADeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADeleteActionPerformed
        int row = agentTable.getSelectedRow();
        String id = txtAID.getText();
        AgentDAO dao = new AgentDAO();
        boolean deleted = false;
        try {
            deleted = dao.delete(id);
            if (deleted) {
                agentResult.remove(row);
                agentModel.removeRow(row);
                JOptionPane.showMessageDialog(null, "Deleted");
                //default
                txtAID.setText("");
                txtAPassWord.setText("");
                txtAName.setText("");
                txtABirth.setText("");
                txtAHeight.setText("");
                txtARole.setText("");
                txtAMajor.setText("");
                txtADegree.setText("");
                try {
                    BufferedImage img = ImageIO.read(new File("images\\default.png"));
                    ImageIcon icon = new ImageIcon(img.getScaledInstance(labelAimg.getWidth(), labelAimg.getHeight(), img.SCALE_SMOOTH));
                    labelAimg.setIcon(icon);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Delete failed");
            }
        } catch (Exception e) {
            if (e.getMessage().contains("FK_")) {
                JOptionPane.showMessageDialog(null, "You should remove his/her mission before delete him/her");
            } else {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnADeleteActionPerformed

    private void btnASearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnASearchActionPerformed
        agentModel.setRowCount(0);
        chBoxLoadAnosuper.setSelected(false);
        chBoxLoadAsuper.setSelected(false);
        String name = txtASearch.getText().trim();
        if (name.length() == 0) {
            JOptionPane.showMessageDialog(null, "Please, type something...");
            aCurPage = 0;
            aPage = 0;
            labelApage.setText(aCurPage + " / " + aPage);
        } else {
            AgentDAO dao = new AgentDAO();
            try {
                int numOfrecord = dao.countARecord(name);
                aPage = returnNumOfPage(numOfrecord);
                aCurPage = 1;
                labelApage.setText(aCurPage + " / " + aPage);
                agentResult = dao.searchAName(name, aCurPage);
                if (agentResult.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No result were found");
                } else {
                    displayAgent(agentResult);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnASearchActionPerformed

    private void weaponTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weaponTableMouseClicked
        txtWCode.setEnabled(false);
        txtWMcode.setEnabled(true);
        txtWMcode.setText("");
        int row = weaponTable.getSelectedRow();
        if (row < 0) {
            return;
        } else {
            WeaponDTO cur = weaponResult.get(row);
            txtWCode.setText(cur.getWeaponCode());
            txtWName.setText(cur.getWeaponName());
            txtWDes.setText(cur.getDes());
            txtWFund.setText(cur.getFund());
            try {
                BufferedImage img = ImageIO.read(new File(cur.getImage()));
                ImageIcon icon = new ImageIcon(img.getScaledInstance(labelWImage.getWidth(), labelWImage.getHeight(), img.SCALE_SMOOTH));
                labelWImage.setIcon(icon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            //search which mission borrow this weapon
            List<MissionWeaponDTO> listMission = new ArrayList();
            listMission = this.searchBorrowMission(txtWCode.getText());
            if (!(listMission.size() == 0)) {
                this.appendTxtWMcode(listMission);
            }
        }
    }//GEN-LAST:event_weaponTableMouseClicked

    private void loadWeaponItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadWeaponItemActionPerformed
        weaponModel.setRowCount(0);
        txtWSearchName.setText("");
        WeaponDAO dao = new WeaponDAO();
        try {
            int record = dao.countWRecord("");
            wPage = returnNumOfPage(record);
            wCurPage = 1;
            weaponResult = dao.searchByWName("", wCurPage);
            labelWPage.setText(wCurPage + " / " + wPage);
            displayWeapon(weaponResult);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_loadWeaponItemActionPerformed

    private void btnWNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWNewActionPerformed
        txtWMcode.setEnabled(false);
        txtWCode.setEnabled(true);
        txtWCode.setText("");
        txtWName.setText("");
        txtWDes.setText("");
        txtWFund.setText("");
        txtWExpiryDate.setText("");
        txtWMcode.setText("");
        try {
            BufferedImage img = ImageIO.read(new File("images\\default.png"));
            ImageIcon icon = new ImageIcon(img.getScaledInstance(labelWImage.getWidth(), labelWImage.getHeight(), img.SCALE_SMOOTH));
            labelWImage.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnWNewActionPerformed

    private void btnWChangeImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWChangeImgActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        file = chooser.getSelectedFile();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedImage img = ImageIO.read(file);
                ImageIcon icon = new ImageIcon(img.getScaledInstance(labelWImage.getWidth(), labelWImage.getHeight(), img.SCALE_SMOOTH));
                labelWImage.setIcon(icon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btnWChangeImgActionPerformed

    private void btnWInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWInsertActionPerformed
        String code = txtWCode.getText().toUpperCase();
        String name = txtWName.getText();
        String fund = txtWFund.getText();
        String des = txtWDes.getText();
        String img;
        if (file == null) {
            img = "images\\default.png";
        } else {
            img = changeToRelativePath(file.getAbsolutePath());
        }
        String check = checkWeaponValid(code, name, fund, des);
        if (check.equals("")) {
            WeaponDTO dto = new WeaponDTO(code, name, fund, des, img);
            WeaponDAO dao = new WeaponDAO();
            if (weaponResult == null) {
                weaponResult = new ArrayList();
            }
            boolean inserted = false;
            try {
                inserted = dao.insert(dto);
                if (inserted) {
                    txtWCode.setEnabled(false);
                    weaponModel.addRow(dto.toVector());
                    weaponResult.add(dto);
                    JOptionPane.showMessageDialog(null, "Inserted");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Code existed");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
        file = null;
    }//GEN-LAST:event_btnWInsertActionPerformed

    private void btnWDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWDeleteActionPerformed
        String code = txtWCode.getText();
        int row = weaponTable.getSelectedRow();
        WeaponDAO dao = new WeaponDAO();
        boolean deleted = false;
        try {
            deleted = dao.delete(code);
            if (deleted) {
                weaponModel.removeRow(row);
                weaponResult.remove(row);
                txtWCode.setText("");
                txtWName.setText("");
                txtWDes.setText("");
                txtWFund.setText("");
                txtWExpiryDate.setText("");
                txtWMcode.setText("");
                try {
                    BufferedImage img = ImageIO.read(new File("images\\default.png"));
                    ImageIcon icon = new ImageIcon(img.getScaledInstance(labelWImage.getWidth(), labelWImage.getHeight(), img.SCALE_SMOOTH));
                    labelWImage.setIcon(icon);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
                JOptionPane.showMessageDialog(null, "Deleted");
            }
        } catch (Exception e) {
            if (e.getMessage().contains("FK_")) {
                JOptionPane.showMessageDialog(null, "You should remove mission code before delete this weapon");
            } else {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnWDeleteActionPerformed

    private void btnWUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWUpdateActionPerformed
        int row = weaponTable.getSelectedRow();
        String code = txtWCode.getText();
        String name = txtWName.getText();
        String fund = txtWFund.getText();
        String des = txtWDes.getText();
        String img;
        WeaponDTO cur = weaponResult.get(row);
        if (file == null) {
            img = cur.getImage();
        } else {
            img = changeToRelativePath(file.getAbsolutePath());
        }
        String check = checkWeaponValid(code, name, fund, des);
        if (check.equals("")) {
            boolean updated = false;
            WeaponDAO dao = new WeaponDAO();
            WeaponDTO dto = new WeaponDTO(code, name, fund, des, img);
            try {
                updated = dao.update(dto);
                if (updated) {
                    weaponModel.setValueAt(code, row, 0);
                    weaponModel.setValueAt(name, row, 1);
                    weaponModel.setValueAt(fund, row, 2);
                    weaponResult.set(row, dto);
                    JOptionPane.showMessageDialog(null, "Updated");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, check);
        }
        file = null;
        //update,insert,delete MissionWeapon table
        String line = txtWMcode.getText().toUpperCase();
        StringTokenizer stk = new StringTokenizer(line);
        List<MissionWeaponDTO> listMW = new ArrayList();
        MissionDAO daoM = new MissionDAO();//use searchByCode method to get expiryDate
        String expiry = "", mCode;
        while (stk.hasMoreTokens()) {
            try {
                mCode = stk.nextToken();
                expiry = daoM.searchByCode(mCode);
                listMW.add(new MissionWeaponDTO(mCode, code, expiry));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
        MissionWeaponDAO daoMW = new MissionWeaponDAO();
        boolean inserted, deleted;

        if (listMW.size() == 0) {
            try {
                deleted = daoMW.delete(code);
                if (deleted) {
                    JOptionPane.showMessageDialog(null, "Updated missions borrow this weapon");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            try {
                deleted = daoMW.delete(code);
                inserted = daoMW.insert(listMW);
                if (inserted) {
                    JOptionPane.showMessageDialog(null, "Updated missions borrow this weapon");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("FK_")) {
                    JOptionPane.showMessageDialog(null, "Mission Code doesn't exist");
                } else if (e.getMessage().contains("truncate")) {
                    JOptionPane.showMessageDialog(null, "Mission Code doesn't exist");
                } else if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Mission code have been borrowed");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnWUpdateActionPerformed

    private void btnWSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWSearchNameActionPerformed
        weaponModel.setRowCount(0);
        String name = txtWSearchName.getText().trim();
        if (name.length() == 0) {
            JOptionPane.showMessageDialog(null, "Please, Type somthing...");
            wCurPage = 0;
            wPage = 0;
            labelWPage.setText(wCurPage + " / " + wPage);
        } else {
            WeaponDAO dao = new WeaponDAO();
            try {
                int record = dao.countWRecord(name);
                wPage = returnNumOfPage(record);
                wCurPage = 1;
                weaponResult = dao.searchByWName(name, wCurPage);
                labelWPage.setText(wCurPage + " / " + wPage);
                displayWeapon(weaponResult);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnWSearchNameActionPerformed

    private void btnANextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnANextPageActionPerformed
        if (aPage != 0 && aCurPage < aPage) {
            agentModel.setRowCount(0);
            AgentDAO agentDao = new AgentDAO();
            try {
                this.aCurPage++;
                labelApage.setText(aCurPage + " / " + aPage);
                if (chBoxLoadAsuper.isSelected()) {
                    agentResult = agentDao.loadPowerOrNot(true, aCurPage);
                } else if (chBoxLoadAnosuper.isSelected()) {
                    agentResult = agentDao.loadPowerOrNot(false, aCurPage);
                } else if (txtASearch.getText().equals("")) {
                    agentResult = agentDao.searchAName("", aCurPage);
                } else {
                    agentResult = agentDao.searchAName(txtASearch.getText(), aCurPage);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            displayAgent(agentResult);
        }
    }//GEN-LAST:event_btnANextPageActionPerformed

    private void btnAPrePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAPrePageActionPerformed
        if (aPage != 0 && aCurPage > 1) {
            agentModel.setRowCount(0);
            AgentDAO agentDao = new AgentDAO();
            try {
                this.aCurPage--;
                labelApage.setText(aCurPage + " / " + aPage);
                if (chBoxLoadAsuper.isSelected()) {
                    agentResult = agentDao.loadPowerOrNot(true, aCurPage);
                } else if (chBoxLoadAnosuper.isSelected()) {
                    agentResult = agentDao.loadPowerOrNot(false, aCurPage);
                } else if (txtASearch.getText().equals("")) {
                    agentResult = agentDao.searchAName("", aCurPage);
                } else {
                    agentResult = agentDao.searchAName(txtASearch.getText(), aCurPage);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            displayAgent(agentResult);
        }
    }//GEN-LAST:event_btnAPrePageActionPerformed

    private void chBoxLoadAsuperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBoxLoadAsuperActionPerformed
        agentModel.setRowCount(0);
        txtASearch.setText("");
        chBoxLoadAnosuper.setSelected(false);
        AgentDAO dao = new AgentDAO();
        try {
            int record = dao.countAisSuper(true);
            aPage = returnNumOfPage(record);
            aCurPage = 1;
            labelApage.setText(aCurPage + " / " + aPage);
            agentResult = dao.loadPowerOrNot(true, aCurPage);
            displayAgent(agentResult);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_chBoxLoadAsuperActionPerformed

    private void chBoxLoadAnosuperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBoxLoadAnosuperActionPerformed
        agentModel.setRowCount(0);
        chBoxLoadAsuper.setSelected(false);
        txtASearch.setText("");
        AgentDAO dao = new AgentDAO();
        try {
            int record = dao.countAisSuper(false);
            aPage = returnNumOfPage(record);
            aCurPage = 1;
            labelApage.setText(aCurPage + " / " + aPage);
            agentResult = dao.loadPowerOrNot(false, aCurPage);
            displayAgent(agentResult);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_chBoxLoadAnosuperActionPerformed

    private void btnMNextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMNextPageActionPerformed
        if (mPage != 0 && mCurPage < mPage) {
            missionModel.setRowCount(0);
            try {
                this.mCurPage++;
                MissionDAO dao = new MissionDAO();
                labelMPage.setText(mCurPage + " / " + mPage);
                if (txtMSearch.equals("")) {
                    missionResult = dao.searchName("", mCurPage);
                } else {
                    missionResult = dao.searchName(txtMSearch.getText(), mCurPage);
                }
                displayMission(missionResult);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMNextPageActionPerformed

    private void btnMPrePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMPrePageActionPerformed
        if (mPage != 0 && mCurPage > 1) {
            missionModel.setRowCount(0);
            try {
                this.mCurPage--;
                MissionDAO dao = new MissionDAO();
                labelMPage.setText(mCurPage + " / " + mPage);
                if (txtMSearch.equals("")) {
                    missionResult = dao.searchName("", mCurPage);
                } else {
                    missionResult = dao.searchName(txtMSearch.getText(), mCurPage);
                }
                displayMission(missionResult);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMPrePageActionPerformed

    private void btnWNextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWNextPageActionPerformed
        if (wPage != 0 && wCurPage < wPage) {
            weaponModel.setRowCount(0);
            try {
                this.wCurPage++;
                WeaponDAO dao = new WeaponDAO();
                labelWPage.setText(wCurPage + " / " + wPage);
                if (txtWSearchName.equals("")) {
                    weaponResult = dao.searchByWName("", wCurPage);
                } else {
                    weaponResult = dao.searchByWName(txtWSearchName.getText(), wCurPage);
                }
                displayWeapon(weaponResult);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnWNextPageActionPerformed

    private void btnWPrePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWPrePageActionPerformed
        if (wPage != 0 && wCurPage > 1) {
            weaponModel.setRowCount(0);
            try {
                this.wCurPage--;
                WeaponDAO dao = new WeaponDAO();
                labelWPage.setText(wCurPage + " / " + wPage);
                if (txtWSearchName.equals("")) {
                    weaponResult = dao.searchByWName("", wCurPage);
                } else {
                    weaponResult = dao.searchByWName(txtWSearchName.getText(), wCurPage);
                }
                displayWeapon(weaponResult);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnWPrePageActionPerformed

    private void txtABirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtABirthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtABirthActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int confirm = JOptionPane.showConfirmDialog(null, "YES to exit program / NO back to login");
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else if (confirm == JOptionPane.NO_OPTION) {
            Login log = new Login();
            log.setVisible(true);
            this.dispose();
        } else {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private String checkAgentValid(String id, String password, String name, String major, String role, int degree, int birth, int height) {
        String check = "";
        if (id.trim().length() == 0) {
            check += " Agent ID";
        }
        if (password.trim().length() == 0) {
            check += " Password";
        }
        if (name.trim().length() == 0) {
            check += " Name";
        }
        if (major.trim().length() == 0) {
            check += " Major";
        }
        if (role.trim().length() == 0) {
            check += " Role";
        }
        if (!check.equals("") || degree <= 0 || birth <= 0 || height <= 0) {
            if (!check.equals("")) {
                check += " can't be blank.";
            }
            if (degree <= 0 || birth <= 0 || height <= 0) {
                check += " degree, birth, height > 0";
            }
        } else if (!id.matches("AG\\d{3}")) {
            check += "Agent ID format (AG000)";
        }
        return check;
    }

    private String checkMission(String code, String name, String target, String des, String begin, String expiry, int num, String location, String status) {
        String check = "";
        if (code.trim().length() == 0) {
            check += " Code";
        }
        if (name.trim().length() == 0) {
            check += " Mission name";
        }
        if (target.trim().length() == 0) {
            check += " Target";
        }
        if (des.trim().length() == 0) {
            check += " Description";
        }
        if (begin.trim().length() == 0) {
            check += " Beginning date";
        }
        if (expiry.trim().length() == 0) {
            check += " Expiry date";
        }
        if (location.trim().length() == 0) {
            check += " Location";
        }
        if (status.trim().length() == 0) {
            check += " Status";
        }
        if (!check.equals("") || num <= 0) {
            if (!check.equals("")) {
                check += " can't be blank.";
            }
            if (num <= 0) {
                check += " Number of agent must > 0";
            }
        } else if (!code.matches("MS\\d{2}")) {
            check += " Mission code format (MS00)";
        } else if (!(status.equalsIgnoreCase("waiting") || status.equalsIgnoreCase("accepted") || status.equalsIgnoreCase("failed") || status.equalsIgnoreCase("accomplished"))) {
            check += " Status must be Waiting or Accepted or Failed or Accomplished";
        }
        return check;
    }

    private String checkWeaponValid(String code, String name, String fund, String des) {
        String check = "";
        if (code.trim().length() == 0) {
            check += " Code";
        }
        if (name.trim().length() == 0) {
            check += " Name";
        }
        if (fund.trim().length() == 0) {
            check += " Fund";
        }
        if (des.trim().length() == 0) {
            check += " Description";
        }
        if (!check.equals("")) {
            check += " can't be blank";
        } else if (!code.matches("WP\\d{3}")) {
            check += " Weapon Code format (WP000)";
        }
        return check;
    }

    private void displayMission(List<MissionDTO> list) {
        for (MissionDTO dto : list) {
            missionModel.addRow(dto.toVector());
        }
    }

    private void displayAgent(List<AgentDTO> list) {
        for (AgentDTO dto : list) {
            agentModel.addRow(dto.toVector());
        }
    }

    private void displayWeapon(List<WeaponDTO> list) {
        for (WeaponDTO dto : list) {
            weaponModel.addRow(dto.toVector());
        }
    }

    /**
     * return list missions Which agent in ....
     */
    private List<AgentMissionDTO> searchAgentID(String aID) {
        List<AgentMissionDTO> result = new ArrayList();
        AgentMissionDAO dao = new AgentMissionDAO();
        try {
            result = dao.searchByAID(aID);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return result;
    }

    /**
     * return list agent in mission
     */
    private List<AgentMissionDTO> searchMissionCode(String mCode) {
        List<AgentMissionDTO> result = new ArrayList();
        AgentMissionDAO dao = new AgentMissionDAO();
        try {
            result = dao.searchByMCode(mCode);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return result;
    }

    /**
     * return list mission which borrow this weapon
     */
    private List<MissionWeaponDTO> searchBorrowMission(String wCode) {
        List<MissionWeaponDTO> result = new ArrayList();
        MissionWeaponDAO dao = new MissionWeaponDAO();
        try {
            result = dao.searchMission(wCode);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return result;
    }

    /**
     * return list weapon in mission
     */
    private List<MissionWeaponDTO> searchWeapon(String mCode) {
        List<MissionWeaponDTO> result = new ArrayList();
        MissionWeaponDAO dao = new MissionWeaponDAO();
        try {
            result = dao.searchWeapon(mCode);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return result;
    }

    /**
     * append list mission into text area and expiry day (text field)
     */
    private void appendTxtWMcode(List<MissionWeaponDTO> listMission) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
        Date tmpDate = new Date(), date = new Date();
        for (MissionWeaponDTO dto : listMission) {
            txtWMcode.append(dto.getMissionCode() + "\n");
        }
        //get max day
        try {
            tmpDate = sdf.parse(listMission.get(0).getExpiryDay());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        for (int i = 1; i < listMission.size(); i++) {
            try {
                date = sdf.parse(listMission.get(i).getExpiryDay());
                if (date.after(tmpDate)) {
                    tmpDate = date;
                } else {
                    tmpDate = sdf.parse(listMission.get(i - 1).getExpiryDay());
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        txtWExpiryDate.setText(sdf.format(tmpDate));
    }

    /**
     * update AgentMission Table when remove,add,update in JtextArea
     */
    private void updateAgentMission(String code, int num) {
        boolean deleted = false, inserted = false;
        List<AgentMissionDTO> list = new ArrayList();
        String line = txtMAgentID.getText().toUpperCase();
        StringTokenizer stk = new StringTokenizer(line);
        while (stk.hasMoreTokens()) {
            list.add(new AgentMissionDTO(stk.nextToken(), code));
        }
        AgentMissionDAO daoAM = new AgentMissionDAO();
        if (list.size() == 0) {
            try {
                deleted = daoAM.deleteByMCode(code);
                if (deleted) {
                    JOptionPane.showMessageDialog(null, "Deleted mission's agents");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else if (list.size() <= num) {
            try {
                deleted = daoAM.deleteByMCode(code);
                inserted = daoAM.insert(list);
                if (inserted) {
                    JOptionPane.showMessageDialog(null, "Updated mission's agents");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("FK_")) {
                    JOptionPane.showMessageDialog(null, "AgentID doesn't exist");
                } else if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Agent have been assigned");
                } else if (e.getMessage().contains("truncate")) {
                    JOptionPane.showMessageDialog(null, "AgentID doesn't exist");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage() + " Format Agent ID : AG000");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Number of agent <= " + num);
        }
    }

    /**
     * update MissionWeapon Table when remove,add,update in JtextArea
     */
    private void updateMissionWeapon(String mCode, String expiryDate) {
        boolean deleted, inserted;
        List<MissionWeaponDTO> list = new ArrayList();
        MissionWeaponDAO dao = new MissionWeaponDAO();
        String line = txtMWeapons.getText().toUpperCase();
        StringTokenizer stk = new StringTokenizer(line);
        while (stk.hasMoreTokens()) {
            list.add(new MissionWeaponDTO(mCode, stk.nextToken(), expiryDate));
        }
        if (list.size() == 0) {
            try {
                deleted = dao.deleteByMCode(mCode);
                if (deleted) {
                    JOptionPane.showMessageDialog(null, "Deleted mission's weapons");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            try {
                deleted = dao.deleteByMCode(mCode);
                inserted = dao.insert(list);
                if (inserted) {
                    JOptionPane.showMessageDialog(null, "Updated weapon");
                }
            } catch (Exception e) {
                if (e.getMessage().contains("FK_")) {
                    JOptionPane.showMessageDialog(null, "Weapon Code doesn't exist");
                } else if (e.getMessage().contains("duplicate")) {
                    JOptionPane.showMessageDialog(null, "Weapon have been assigned");
                } else if (e.getMessage().contains("truncate")) {
                    JOptionPane.showMessageDialog(null, "Weapon Code doesn't exist");
                } else {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }
    }

    /**
     * get relative path
     */
    private String changeToRelativePath(String absolute) {
        for (int i = 0; i < absolute.length(); i++) {
            try {
                if (absolute.substring(i, i + 6).equals("images")) {
                    absolute = absolute.substring(i);
                }
            } catch (Exception e) {
                return absolute;
            }
        }
        return absolute;
    }

    /**
     * get number of page
     */
    private int returnNumOfPage(int record) {
        int page;
        if (record % 7 == 0) {
            page = record / 7;
        } else {
            page = record / 7 + 1;
        }
        return page;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JPanel agentDetailPanel;
    private javax.swing.JPanel agentPanel;
    private javax.swing.JTable agentTable;
    private javax.swing.JPanel avatarPanel;
    private javax.swing.JButton btnAChangeImg;
    private javax.swing.JButton btnADelete;
    private javax.swing.JButton btnAInsert;
    private javax.swing.JButton btnANew;
    private javax.swing.JButton btnANextPage;
    private javax.swing.JButton btnAPrePage;
    private javax.swing.JButton btnASearch;
    private javax.swing.JButton btnAUpdate;
    private javax.swing.JButton btnMDelete;
    private javax.swing.JButton btnMInsert;
    private javax.swing.JButton btnMNew;
    private javax.swing.JButton btnMNextPage;
    private javax.swing.JButton btnMPrePage;
    private javax.swing.JButton btnMSearchName;
    private javax.swing.JButton btnMUpdate;
    private javax.swing.JButton btnWChangeImg;
    private javax.swing.JButton btnWDelete;
    private javax.swing.JButton btnWInsert;
    private javax.swing.JButton btnWNew;
    private javax.swing.JButton btnWNextPage;
    private javax.swing.JButton btnWPrePage;
    private javax.swing.JButton btnWSearchName;
    private javax.swing.JButton btnWUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox chBoxLoadAnosuper;
    private javax.swing.JCheckBox chBoxLoadAsuper;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JPanel imageWPanel;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPanee;
    private javax.swing.JLabel labelAimg;
    private javax.swing.JLabel labelApage;
    private javax.swing.JLabel labelMPage;
    private javax.swing.JLabel labelWImage;
    private javax.swing.JLabel labelWPage;
    private javax.swing.JMenuItem loadAgentItem;
    private javax.swing.JMenuItem loadMissionItem;
    private javax.swing.JMenuItem loadWeaponItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel missionDetailPanel;
    private javax.swing.JPanel missionPanel;
    private javax.swing.JTable missionTable;
    private javax.swing.JRadioButton rbtnFemale;
    private javax.swing.JRadioButton rbtnMale;
    private javax.swing.JRadioButton rbtnNo;
    private javax.swing.JRadioButton rbtnYes;
    private javax.swing.JTextField txtABirth;
    private javax.swing.JTextField txtADegree;
    private javax.swing.JTextField txtAHeight;
    private javax.swing.JTextField txtAID;
    private javax.swing.JTextField txtAMajor;
    private javax.swing.JTextField txtAName;
    private javax.swing.JPasswordField txtAPassWord;
    private javax.swing.JTextField txtARole;
    private javax.swing.JTextField txtASearch;
    private javax.swing.JTextArea txtAmission;
    private javax.swing.JTextArea txtMAgentID;
    private javax.swing.JTextField txtMCode;
    private javax.swing.JTextArea txtMDescription;
    private javax.swing.JTextField txtMExpiry;
    private javax.swing.JTextField txtMLocation;
    private javax.swing.JTextField txtMName;
    private javax.swing.JTextField txtMNumofagent;
    private javax.swing.JTextField txtMSearch;
    private javax.swing.JTextField txtMStatus;
    private javax.swing.JTextField txtMTarget;
    private javax.swing.JTextArea txtMWeapons;
    private javax.swing.JTextField txtMbegin;
    private javax.swing.JTextField txtWCode;
    private javax.swing.JTextArea txtWDes;
    private javax.swing.JTextField txtWExpiryDate;
    private javax.swing.JTextField txtWFund;
    private javax.swing.JTextArea txtWMcode;
    private javax.swing.JTextField txtWName;
    private javax.swing.JTextField txtWSearchName;
    private javax.swing.JPanel weaponDetailPanel;
    private javax.swing.JPanel weaponPanel;
    private javax.swing.JTable weaponTable;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.PNG")));
    }
}
